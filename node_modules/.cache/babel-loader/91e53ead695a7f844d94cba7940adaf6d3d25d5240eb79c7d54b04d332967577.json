{"ast":null,"code":"\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n// Debugging line for testing browser lib in node\n//const window = { crypto: { getRandomValues: () => { } } };\nlet anyGlobal = null;\ntry {\n  anyGlobal = window;\n  if (anyGlobal == null) {\n    throw new Error(\"try next\");\n  }\n} catch (error) {\n  try {\n    anyGlobal = global;\n    if (anyGlobal == null) {\n      throw new Error(\"try next\");\n    }\n  } catch (error) {\n    anyGlobal = {};\n  }\n}\nlet crypto = anyGlobal.crypto || anyGlobal.msCrypto;\nif (!crypto || !crypto.getRandomValues) {\n  logger.warn(\"WARNING: Missing strong random number source\");\n  crypto = {\n    getRandomValues: function (buffer) {\n      return logger.throwError(\"no secure random source avaialble\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"crypto.getRandomValues\"\n      });\n    }\n  };\n}\nexport function randomBytes(length) {\n  if (length <= 0 || length > 1024 || length % 1 || length != length) {\n    logger.throwArgumentError(\"invalid length\", \"length\", length);\n  }\n  const result = new Uint8Array(length);\n  crypto.getRandomValues(result);\n  return arrayify(result);\n}\n;","map":{"version":3,"names":["arrayify","Logger","version","logger","anyGlobal","window","Error","error","global","crypto","msCrypto","getRandomValues","warn","buffer","throwError","errors","UNSUPPORTED_OPERATION","operation","randomBytes","length","throwArgumentError","result","Uint8Array"],"sources":["/Users/apple/Desktop/gasless_minting_website/GASLESS_MINTING_WEBSITE/gasless_nft_mint/node_modules/@ethersproject/random/src.ts/browser-random.ts"],"sourcesContent":["\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n// Debugging line for testing browser lib in node\n//const window = { crypto: { getRandomValues: () => { } } };\n\nlet anyGlobal: any = null;\ntry {\n    anyGlobal = (window as any);\n    if (anyGlobal == null) { throw new Error(\"try next\"); }\n} catch (error) {\n    try {\n        anyGlobal = (global as any);\n        if (anyGlobal == null) { throw new Error(\"try next\"); }\n    } catch (error) {\n        anyGlobal = { };\n    }\n}\n\nlet crypto: any = anyGlobal.crypto || anyGlobal.msCrypto;\nif (!crypto || !crypto.getRandomValues) {\n\n    logger.warn(\"WARNING: Missing strong random number source\");\n\n    crypto = {\n        getRandomValues: function(buffer: Uint8Array): Uint8Array {\n            return logger.throwError(\"no secure random source avaialble\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"crypto.getRandomValues\"\n            });\n        }\n    };\n}\n\nexport function randomBytes(length: number): Uint8Array {\n    if (length <= 0 || length > 1024 || (length % 1) || length != length) {\n        logger.throwArgumentError(\"invalid length\", \"length\", length);\n    }\n\n    const result = new Uint8Array(length);\n    crypto.getRandomValues(result);\n    return arrayify(result);\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,QAAQ,QAAQ,sBAAsB;AAE/C,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,OAAO,CAAC;AAElC;AACA;AAEA,IAAIE,SAAS,GAAQ,IAAI;AACzB,IAAI;EACAA,SAAS,GAAIC,MAAc;EAC3B,IAAID,SAAS,IAAI,IAAI,EAAE;IAAE,MAAM,IAAIE,KAAK,CAAC,UAAU,CAAC;;CACvD,CAAC,OAAOC,KAAK,EAAE;EACZ,IAAI;IACAH,SAAS,GAAII,MAAc;IAC3B,IAAIJ,SAAS,IAAI,IAAI,EAAE;MAAE,MAAM,IAAIE,KAAK,CAAC,UAAU,CAAC;;GACvD,CAAC,OAAOC,KAAK,EAAE;IACZH,SAAS,GAAG,EAAG;;;AAIvB,IAAIK,MAAM,GAAQL,SAAS,CAACK,MAAM,IAAIL,SAAS,CAACM,QAAQ;AACxD,IAAI,CAACD,MAAM,IAAI,CAACA,MAAM,CAACE,eAAe,EAAE;EAEpCR,MAAM,CAACS,IAAI,CAAC,8CAA8C,CAAC;EAE3DH,MAAM,GAAG;IACLE,eAAe,EAAE,SAAAA,CAASE,MAAkB;MACxC,OAAOV,MAAM,CAACW,UAAU,CAAC,mCAAmC,EAAEb,MAAM,CAACc,MAAM,CAACC,qBAAqB,EAAE;QAC/FC,SAAS,EAAE;OACd,CAAC;IACN;GACH;;AAGL,OAAM,SAAUC,WAAWA,CAACC,MAAc;EACtC,IAAIA,MAAM,IAAI,CAAC,IAAIA,MAAM,GAAG,IAAI,IAAKA,MAAM,GAAG,CAAE,IAAIA,MAAM,IAAIA,MAAM,EAAE;IAClEhB,MAAM,CAACiB,kBAAkB,CAAC,gBAAgB,EAAE,QAAQ,EAAED,MAAM,CAAC;;EAGjE,MAAME,MAAM,GAAG,IAAIC,UAAU,CAACH,MAAM,CAAC;EACrCV,MAAM,CAACE,eAAe,CAACU,MAAM,CAAC;EAC9B,OAAOrB,QAAQ,CAACqB,MAAM,CAAC;AAC3B;AAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}