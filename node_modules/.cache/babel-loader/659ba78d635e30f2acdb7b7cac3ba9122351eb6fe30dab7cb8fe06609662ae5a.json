{"ast":null,"code":"import { ethers } from \"ethers\";\nconst SIGNING_DOMAIN_NAME = \"SAKIB.WEB3\";\nconst SIGNING_DOMAIN_VERSION = \"1\";\nclass SignHelper {\n  constructor(contractAddress, chainId, signer) {\n    this.contractAddress = contractAddress;\n    this.chainId = chainId;\n    this.signer = signer;\n  }\n  async createSignature(id, name) {\n    const obj = {\n      id,\n      name\n    };\n    const domain = await this._signingDomain();\n    const types = {\n      web3Struct: [{\n        name: \"id\",\n        type: \"uint256\"\n      }, {\n        name: \"name\",\n        type: \"string\"\n      }]\n    };\n    const signature = await this.signer._signTypedData(domain, types, obj);\n    return {\n      ...obj,\n      signature\n    };\n  }\n  async _signingDomain() {\n    if (this._domain != null) {\n      return this._domain;\n    }\n    const chainId = await this.chainId;\n    this._domain = {\n      name: SIGNING_DOMAIN_NAME,\n      version: SIGNING_DOMAIN_VERSION,\n      verifyingContract: this.contractAddress,\n      chainId\n    };\n    return this._domain;\n  }\n  static async getSign(contractAddress, chainId, tokenId, name) {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    console.log({\n      signer\n    });\n    await signer.getAddress();\n    const lm = new SignHelper(contractAddress, chainId, signer);\n    const voucher = await lm.createSignature(tokenId, name);\n    return voucher;\n  }\n}\nexport default SignHelper;","map":{"version":3,"names":["ethers","SIGNING_DOMAIN_NAME","SIGNING_DOMAIN_VERSION","SignHelper","constructor","contractAddress","chainId","signer","createSignature","id","name","obj","domain","_signingDomain","types","web3Struct","type","signature","_signTypedData","_domain","version","verifyingContract","getSign","tokenId","provider","providers","Web3Provider","window","ethereum","send","getSigner","console","log","getAddress","lm","voucher"],"sources":["/Users/apple/Desktop/gasless_minting_website/GASLESS_MINTING_WEBSITE/gasless_nft_mint/src/components/SignHelper.js"],"sourcesContent":["import { ethers } from \"ethers\";\n\nconst SIGNING_DOMAIN_NAME = \"SAKIB.WEB3\";\nconst SIGNING_DOMAIN_VERSION = \"1\";\n\nclass SignHelper {\n  constructor(contractAddress, chainId, signer) {\n    this.contractAddress = contractAddress;\n    this.chainId = chainId;\n    this.signer = signer;\n  }\n\n  async createSignature(id, name) {\n    const obj = { id, name };\n    const domain = await this._signingDomain();\n    const types = {\n      web3Struct: [\n        { name: \"id\", type: \"uint256\" },\n        { name: \"name\", type: \"string\" },\n      ],\n    };\n    const signature = await this.signer._signTypedData(domain, types, obj);\n    return { ...obj, signature };\n  }\n\n  async _signingDomain() {\n    if (this._domain != null) {\n      return this._domain;\n    }\n    const chainId = await this.chainId;\n    this._domain = {\n      name: SIGNING_DOMAIN_NAME,\n      version: SIGNING_DOMAIN_VERSION,\n      verifyingContract: this.contractAddress,\n      chainId,\n    };\n    return this._domain;\n  }\n\n  static async getSign(contractAddress, chainId, tokenId, name) {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    console.log({signer})\n    await signer.getAddress();\n\n    const lm = new SignHelper(contractAddress, chainId, signer);\n    const voucher = await lm.createSignature(tokenId, name);\n    return voucher;\n  }\n}\n\nexport default SignHelper;\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAE/B,MAAMC,mBAAmB,GAAG,YAAY;AACxC,MAAMC,sBAAsB,GAAG,GAAG;AAElC,MAAMC,UAAU,CAAC;EACfC,WAAWA,CAACC,eAAe,EAAEC,OAAO,EAAEC,MAAM,EAAE;IAC5C,IAAI,CAACF,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACtB;EAEA,MAAMC,eAAeA,CAACC,EAAE,EAAEC,IAAI,EAAE;IAC9B,MAAMC,GAAG,GAAG;MAAEF,EAAE;MAAEC;IAAK,CAAC;IACxB,MAAME,MAAM,GAAG,MAAM,IAAI,CAACC,cAAc,CAAC,CAAC;IAC1C,MAAMC,KAAK,GAAG;MACZC,UAAU,EAAE,CACV;QAAEL,IAAI,EAAE,IAAI;QAAEM,IAAI,EAAE;MAAU,CAAC,EAC/B;QAAEN,IAAI,EAAE,MAAM;QAAEM,IAAI,EAAE;MAAS,CAAC;IAEpC,CAAC;IACD,MAAMC,SAAS,GAAG,MAAM,IAAI,CAACV,MAAM,CAACW,cAAc,CAACN,MAAM,EAAEE,KAAK,EAAEH,GAAG,CAAC;IACtE,OAAO;MAAE,GAAGA,GAAG;MAAEM;IAAU,CAAC;EAC9B;EAEA,MAAMJ,cAAcA,CAAA,EAAG;IACrB,IAAI,IAAI,CAACM,OAAO,IAAI,IAAI,EAAE;MACxB,OAAO,IAAI,CAACA,OAAO;IACrB;IACA,MAAMb,OAAO,GAAG,MAAM,IAAI,CAACA,OAAO;IAClC,IAAI,CAACa,OAAO,GAAG;MACbT,IAAI,EAAET,mBAAmB;MACzBmB,OAAO,EAAElB,sBAAsB;MAC/BmB,iBAAiB,EAAE,IAAI,CAAChB,eAAe;MACvCC;IACF,CAAC;IACD,OAAO,IAAI,CAACa,OAAO;EACrB;EAEA,aAAaG,OAAOA,CAACjB,eAAe,EAAEC,OAAO,EAAEiB,OAAO,EAAEb,IAAI,EAAE;IAC5D,MAAMc,QAAQ,GAAG,IAAIxB,MAAM,CAACyB,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;IACnE,MAAMJ,QAAQ,CAACK,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;IAC9C,MAAMtB,MAAM,GAAGiB,QAAQ,CAACM,SAAS,CAAC,CAAC;IACnCC,OAAO,CAACC,GAAG,CAAC;MAACzB;IAAM,CAAC,CAAC;IACrB,MAAMA,MAAM,CAAC0B,UAAU,CAAC,CAAC;IAEzB,MAAMC,EAAE,GAAG,IAAI/B,UAAU,CAACE,eAAe,EAAEC,OAAO,EAAEC,MAAM,CAAC;IAC3D,MAAM4B,OAAO,GAAG,MAAMD,EAAE,CAAC1B,eAAe,CAACe,OAAO,EAAEb,IAAI,CAAC;IACvD,OAAOyB,OAAO;EAChB;AACF;AAEA,eAAehC,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}